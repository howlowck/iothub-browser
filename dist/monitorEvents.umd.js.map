{"version":3,"file":"monitorEvents.umd.js","sources":["../src/utils.js","../src/monitorEvents.js"],"sourcesContent":["import createHmac from 'create-hmac'\r\n\r\nexport const getTimestampExpiresInMinutes = (minutes) => {\r\n  return Math.ceil((Date.now() / 1000) + minutes * 60)\r\n}\r\n\r\nexport const getSignatureString = (sigObj) => {\r\n  var header = 'SharedAccessSignature '\r\n  var qstr = ['sr', 'sig', 'se', 'skn']\r\n    .map((key) => {\r\n      if (!sigObj[key]) {\r\n        return null\r\n      }\r\n      return key + '=' + sigObj[key]\r\n    }, '')\r\n    .filter(_ => _)\r\n    .join('&')\r\n  return header + qstr\r\n}\r\n\r\nexport const createBase64SasToken = (encodedResourceUri, signingKey, expireTimestamp) => {\r\n  // Set expiration in seconds\r\n  const toSign = encodedResourceUri + '\\n' + expireTimestamp\r\n  const hmac = createHmac('sha256', new Buffer(signingKey, 'base64'))\r\n  hmac.update(toSign)\r\n  const digest = hmac.digest('base64')\r\n  return encodeURIComponent(digest)\r\n}\r\n\r\nexport const createSignatureObj = (hostName, policyName, sas, expireTimestamp) => {\r\n  const encodedHostName = encodeURIComponent(hostName)\r\n  const result = {\r\n    _key: sas,\r\n    sr: encodedHostName,\r\n    se: expireTimestamp,\r\n    sig: createBase64SasToken(encodedHostName, sas, expireTimestamp)\r\n  }\r\n  if (policyName) {\r\n    result.skn = policyName\r\n  }\r\n  return result\r\n}\r\n\r\nexport const parseConnectionString = (connStr) => {\r\n  return connStr\r\n    .split(';')\r\n    .reduce((prev, curr, index) => {\r\n      const searchInd = curr.search('=')\r\n      const key = curr.slice(0, searchInd)\r\n      const value = curr.slice(searchInd + 1)\r\n      prev[key] = value\r\n      return prev\r\n    }, {})\r\n}\r\n\r\nexport const getHostNameFromEndpoint = (endpoint) => {\r\n  return endpoint.slice(5, -1)\r\n}\r\n","/* global WebSocket */\r\nimport amqp from 'rhea'\r\nimport {parseConnectionString, getHostNameFromEndpoint} from './utils'\r\nimport debug from 'debug'\r\nconst log = debug('monitor-events')\r\n\r\nexport default function monitorEvents (eventHubName, eventHubConnectionString, onMessage) {\r\n  // 0. set up the config\r\n  const connectionObj = parseConnectionString(eventHubConnectionString)\r\n  const hostName = getHostNameFromEndpoint(connectionObj.Endpoint)\r\n  const policyName = connectionObj.SharedAccessKeyName\r\n  const sas = connectionObj.SharedAccessKey\r\n\r\n  const url = `wss://${hostName}:443/$servicebus/websocket?iothub-no-client-cert=true`\r\n  const ws = amqp.websocket_connect(WebSocket)\r\n\r\n  // 1. connect to eventhub\r\n  const connection = amqp.connect({\r\n    hostname: hostName,\r\n    container_id: 'conn' + Date.now(),\r\n    max_frame_size: 4294967295,\r\n    channel_max: 65535,\r\n    idle_timeout: 120000,\r\n    outgoing_locales: 'en-US',\r\n    incoming_locales: 'en-US',\r\n    offered_capabilities: null,\r\n    desired_capabilities: null,\r\n    properties: {},\r\n    connection_details: ws(url, ['AMQPWSB10']),\r\n    reconnect: false,\r\n    username: policyName,\r\n    password: sas\r\n  })\r\n\r\n  let sender\r\n\r\n  // 2. open communication for $management to get partitionIds\r\n  amqp.on('connection_open', function (context) {\r\n    connection.open_receiver('$management')\r\n    sender = connection.open_sender('$management')\r\n  })\r\n\r\n  // 3. send the request to get the partitionIds\r\n  amqp.once('sendable', function (context) {\r\n    sender.send({\r\n      body: '[]',\r\n      application_properties: {\r\n        operation: 'READ',\r\n        name: eventHubName, // hostName,\r\n        type: 'com.microsoft:eventhub'\r\n      }\r\n    })\r\n  })\r\n\r\n  // 4. set up filter to only capture from the current timestamp (otherwise will get all events)\r\n  const currentTimestamp = Date.now()\r\n  const filterClause = `amqp.annotation.x-opt-enqueuedtimeutc > '${currentTimestamp}'`\r\n\r\n  const opts = (partId) => ({\r\n    desired_capabilities: 'com.microsoft:enable-receiver-runtime-metric',\r\n    autoaccept: true,\r\n    source: {\r\n      address: 'hao-gl-iothub/ConsumerGroups/$default/Partitions/' + partId,\r\n      filter: {\r\n        'apache.org:selector-filter:string': amqp.types.wrap_described(filterClause, 0x468C00000004)\r\n      }\r\n    }\r\n  })\r\n\r\n  // 5. Open communication to all partitionId paths, register user-defined onMessage callback\r\n  amqp.once('message', function (context) {\r\n    log('monitoring from eventhub endpoint on iothub ...')\r\n    const partitionIds = context.message.body.partition_ids\r\n    partitionIds.forEach(partId => {\r\n      connection.attach_receiver(opts(partId))\r\n    })\r\n    amqp.on('message', (context) => {\r\n      log(context)\r\n      onMessage(context.message.body.content.toString(), context)\r\n    })\r\n  })\r\n\r\n  const close = connection.close.bind(connection)\r\n\r\n  return {\r\n    close\r\n  }\r\n}\r\n"],"names":["const","parseConnectionString","connStr","split","reduce","prev","curr","index","searchInd","search","key","slice","value","getHostNameFromEndpoint","endpoint","log","eventHubName","eventHubConnectionString","onMessage","sender","connectionObj","hostName","Endpoint","policyName","SharedAccessKeyName","sas","SharedAccessKey","url","ws","amqp","websocket_connect","WebSocket","connection","connect","hostname","container_id","Date","now","max_frame_size","channel_max","idle_timeout","outgoing_locales","incoming_locales","offered_capabilities","desired_capabilities","properties","connection_details","reconnect","username","password","on","context","open_receiver","open_sender","once","send","body","application_properties","operation","name","type","filterClause","message","partition_ids","forEach","partId","attach_receiver","autoaccept","source","address","filter","apache.org:selector-filter:string","types","wrap_described","opts","content","toString","close","bind"],"mappings":"4XA2COA,IAAMC,WAAyBC,UAC7BA,EACJC,MAAM,KACNC,gBAAQC,EAAMC,EAAMC,GACnBP,IAAMQ,EAAYF,EAAKG,OAAO,KACxBC,EAAMJ,EAAKK,MAAM,EAAGH,GACpBI,EAAQN,EAAKK,MAAMH,EAAY,GAErC,OADAH,EAAKK,GAAOE,EACLP,QAIAQ,WAA2BC,UAC/BA,EAASH,MAAM,GAAI,ICpDtBI,iDAAY,yBAEH,SAAwBC,EAAcC,EAA0BC,GAE7ElB,IA0BImB,EA1BEC,EAAgBnB,EAAsBgB,GACtCI,EAAWR,EAAwBO,EAAcE,UACjDC,EAAaH,EAAcI,oBAC3BC,EAAML,EAAcM,gBAEpBC,EAAM,SAASN,0DACfO,EAAKC,EAAKC,kBAAkBC,WAG5BC,EAAaH,EAAKI,SACtBC,SAAUb,EACVc,aAAc,OAASC,KAAKC,MAC5BC,eAAgB,WAChBC,YAAa,MACbC,aAAc,KACdC,iBAAkB,QAClBC,iBAAkB,QAClBC,qBAAsB,KACtBC,qBAAsB,KACtBC,cACAC,mBAAoBlB,EAAGD,GAAM,cAC7BoB,WAAW,EACXC,SAAUzB,EACV0B,SAAUxB,IAMZI,EAAKqB,GAAG,kBAAmB,SAAUC,GACnCnB,EAAWoB,cAAc,eACzBjC,EAASa,EAAWqB,YAAY,iBAIlCxB,EAAKyB,KAAK,WAAY,SAAUH,GAC9BhC,EAAOoC,MACLC,KAAM,KACNC,wBACEC,UAAW,OACXC,KAAM3C,EACN4C,KAAM,8BAMZ5D,IACM6D,EAAe,4CADIzB,KAAKC,UA6B9B,OAdAR,EAAKyB,KAAK,UAAW,SAAUH,GAC7BpC,EAAI,mDACiBoC,EAAQW,QAAQN,KAAKO,cAC7BC,iBAAQC,GACnBjC,EAAWkC,yBAhBDD,UACZrB,qBAAsB,+CACtBuB,YAAY,EACZC,QACEC,QAAS,oDAAsDJ,EAC/DK,QACEC,oCAAqC1C,EAAK2C,MAAMC,eAAeZ,EAAc,mBAUpDa,CAAKT,MAElCpC,EAAKqB,GAAG,mBAAYC,GAClBpC,EAAIoC,GACJjC,EAAUiC,EAAQW,QAAQN,KAAKmB,QAAQC,WAAYzB,cAIzCnB,EAAW6C,MAAMC,KAAK9C"}