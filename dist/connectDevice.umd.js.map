{"version":3,"file":"connectDevice.umd.js","sources":["../src/utils.js","../src/connectDevice.js"],"sourcesContent":["import createHmac from 'create-hmac'\r\n\r\nexport const getTimestampExpiresInMinutes = (minutes) => {\r\n  return Math.ceil((Date.now() / 1000) + minutes * 60)\r\n}\r\n\r\nexport const getSignatureString = (sigObj) => {\r\n  var header = 'SharedAccessSignature '\r\n  var qstr = ['sr', 'sig', 'se', 'skn']\r\n    .map((key) => {\r\n      if (!sigObj[key]) {\r\n        return null\r\n      }\r\n      return key + '=' + sigObj[key]\r\n    }, '')\r\n    .filter(_ => _)\r\n    .join('&')\r\n  return header + qstr\r\n}\r\n\r\nexport const createBase64SasToken = (encodedResourceUri, signingKey, expireTimestamp) => {\r\n  // Set expiration in seconds\r\n  const toSign = encodedResourceUri + '\\n' + expireTimestamp\r\n  const hmac = createHmac('sha256', new Buffer(signingKey, 'base64'))\r\n  hmac.update(toSign)\r\n  const digest = hmac.digest('base64')\r\n  return encodeURIComponent(digest)\r\n}\r\n\r\nexport const createSignatureObj = (hostName, policyName, sas, expireTimestamp) => {\r\n  const encodedHostName = encodeURIComponent(hostName)\r\n  const result = {\r\n    _key: sas,\r\n    sr: encodedHostName,\r\n    se: expireTimestamp,\r\n    sig: createBase64SasToken(encodedHostName, sas, expireTimestamp)\r\n  }\r\n  if (policyName) {\r\n    result.skn = policyName\r\n  }\r\n  return result\r\n}\r\n\r\nexport const parseConnectionString = (connStr) => {\r\n  return connStr\r\n    .split(';')\r\n    .reduce((prev, curr, index) => {\r\n      const searchInd = curr.search('=')\r\n      const key = curr.slice(0, searchInd)\r\n      const value = curr.slice(searchInd + 1)\r\n      prev[key] = value\r\n      return prev\r\n    }, {})\r\n}\r\n\r\nexport const getHostNameFromEndpoint = (endpoint) => {\r\n  return endpoint.slice(5, -1)\r\n}\r\n","import {connect} from 'mqtt'\r\nimport {getTimestampExpiresInMinutes, parseConnectionString, createSignatureObj, getSignatureString} from './utils'\r\nimport debug from 'debug'\r\nconst log = debug('device')\r\n\r\nexport default function connectDevice (deviceConnectionString, onC2DMessage) {\r\n  // 0. Set up Config\r\n  const expireTimestamp = getTimestampExpiresInMinutes(60)\r\n  const connObj = parseConnectionString(deviceConnectionString)\r\n  const hostName = connObj.HostName\r\n  const sas = connObj.SharedAccessKey\r\n  const deviceId = connObj.DeviceId\r\n  const sigObj = createSignatureObj(`${hostName}/devices/${deviceId}`, null, sas, expireTimestamp)\r\n  const sigStr = getSignatureString(sigObj)\r\n\r\n  const config = {\r\n    clean: false,\r\n    clientId: deviceId,\r\n    keepalive: 180,\r\n    password: sigStr,\r\n    protocolId: 'MQTT',\r\n    protocolVersion: 4,\r\n    reconnectPeriod: 1000,\r\n    rejectUnauthorized: true,\r\n    connectTimeout: 30 * 1000,\r\n    reschedulePings: true,\r\n    username: `${hostName}/${deviceId}/api-version=2017-06-30`\r\n  }\r\n\r\n  // 1. Connect to IotHub via websocket\r\n  const client = connect(`wss://${hostName}:443/$iothub/websocket?iothub-no-client-cert=true`, config)\r\n\r\n  // 2. Register event listeners\r\n  client.on('connect', function () {\r\n    log('emitter connected!')\r\n  })\r\n\r\n  client.on('offline', function () {\r\n    log('emitter offline')\r\n  })\r\n\r\n  client.on('close', function () {\r\n    log('emitter closed!')\r\n  })\r\n\r\n  client.on('message', onC2DMessage)\r\n\r\n  client.on('packetsend', () => {\r\n    log('trying to send pocket..')\r\n  })\r\n\r\n  // 3. Subscribe to topic for C2D messages\r\n  client.subscribe(`devices/${deviceId}/messages/devicebound/#`, { qos: 0 })\r\n\r\n  // 4. Return publish function\r\n  const publish = (messageStr, params = {}) => {\r\n    const appProps = Object.keys(params).map((key) => {\r\n      return encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\r\n    }).join('&')\r\n    client.publish(`devices/${deviceId}/messages/events/${appProps}`, messageStr, { qos: 1, retain: false })\r\n  }\r\n\r\n  const close = client.end.bind(client)\r\n\r\n  return {\r\n    publish,\r\n    close\r\n  }\r\n}\r\n"],"names":["const","getTimestampExpiresInMinutes","minutes","Math","ceil","Date","now","getSignatureString","sigObj","map","key","filter","_","join","createSignatureObj","hostName","policyName","sas","expireTimestamp","encodedHostName","encodeURIComponent","result","_key","sr","se","sig","encodedResourceUri","signingKey","toSign","hmac","createHmac","Buffer","update","digest","createBase64SasToken","skn","parseConnectionString","connStr","split","reduce","prev","curr","index","searchInd","search","slice","value","log","deviceConnectionString","onC2DMessage","connObj","HostName","deviceId","DeviceId","SharedAccessKey","sigStr","client","connect","clean","clientId","keepalive","password","protocolId","protocolVersion","reconnectPeriod","rejectUnauthorized","connectTimeout","reschedulePings","username","on","subscribe","qos","messageStr","params","appProps","Object","keys","publish","retain","end","bind"],"mappings":"+UAEOA,IAAMC,WAAgCC,UACpCC,KAAKC,KAAMC,KAAKC,MAAQ,IAAkB,GAAVJ,IAG5BK,WAAsBC,GAWjC,MAVa,0BACD,KAAM,MAAO,KAAM,OAC5BC,aAAKC,GACJ,OAAKF,EAAOE,GAGLA,EAAM,IAAMF,EAAOE,GAFjB,MAGR,IACFC,gBAAOC,UAAKA,IACZC,KAAK,MAaGC,WAAsBC,EAAUC,EAAYC,EAAKC,GAC5DlB,IAAMmB,EAAkBC,mBAAmBL,GACrCM,GACJC,KAAML,EACNM,GAAIJ,EACJK,GAAIN,EACJO,aAfiCC,EAAoBC,EAAYT,GAEnElB,IAAM4B,EAASF,EAAqB,KAAOR,EACrCW,EAAOC,EAAW,SAAU,IAAIC,OAAOJ,EAAY,WACzDE,EAAKG,OAAOJ,GACZ5B,IAAMiC,EAASJ,EAAKI,OAAO,UAC3B,OAAOb,mBAAmBa,GASnBC,CAAqBf,EAAiBF,EAAKC,IAKlD,OAHIF,IACFK,EAAOc,IAAMnB,GAERK,GAGIe,WAAyBC,UAC7BA,EACJC,MAAM,KACNC,gBAAQC,EAAMC,EAAMC,GACnB1C,IAAM2C,EAAYF,EAAKG,OAAO,KACxBlC,EAAM+B,EAAKI,MAAM,EAAGF,GACpBG,EAAQL,EAAKI,MAAMF,EAAY,GAErC,OADAH,EAAK9B,GAAOoC,EACLN,QChDPO,iDAAY,iBAEH,SAAwBC,EAAwBC,GAE7DjD,IAAMkB,EAAkBjB,EAA6B,IAC/CiD,EAAUd,EAAsBY,GAChCjC,EAAWmC,EAAQC,SAEnBC,EAAWF,EAAQG,SACnB7C,EAASM,EAAsBC,cAAoBqC,EAAY,KAFzDF,EAAQI,gBAE4DpC,GAC1EqC,EAAShD,EAAmBC,GAiB5BgD,EAASC,mBAAiB1C,uDAd9B2C,OAAO,EACPC,SAAUP,EACVQ,UAAW,IACXC,SAAUN,EACVO,WAAY,OACZC,gBAAiB,EACjBC,gBAAiB,IACjBC,oBAAoB,EACpBC,eAAgB,IAChBC,iBAAiB,EACjBC,SAAarD,MAAYqC,8BAsC3B,OA/BAI,EAAOa,GAAG,UAAW,WACnBtB,EAAI,wBAGNS,EAAOa,GAAG,UAAW,WACnBtB,EAAI,qBAGNS,EAAOa,GAAG,QAAS,WACjBtB,EAAI,qBAGNS,EAAOa,GAAG,UAAWpB,GAErBO,EAAOa,GAAG,wBACRtB,EAAI,6BAINS,EAAOc,qBAAqBlB,6BAAqCmB,IAAK,sBAGrDC,EAAYC,sBAC3BzE,IAAM0E,EAAWC,OAAOC,KAAKH,GAAQhE,aAAKC,UACjCU,mBAAmBV,GAAO,IAAMU,mBAAmBqD,EAAO/D,MAChEG,KAAK,KACR2C,EAAOqB,mBAAmBzB,sBAA4BsB,EAAYF,GAAcD,IAAK,EAAGO,QAAQ,WAGpFtB,EAAOuB,IAAIC,KAAKxB"}